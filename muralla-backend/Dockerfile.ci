FROM node:20-alpine AS base

# Install pnpm directly without corepack
RUN npm install -g pnpm@8.15.5

# Add native build tools for dependencies like bcrypt
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
# Copy root manifest and workspace layout (include lockfile for deterministic installs)
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
# Ensure backend manifest and vendor tarballs are present for install
COPY muralla-backend/package.json muralla-backend/
COPY muralla-backend/vendor muralla-backend/vendor
# Include workspace packages manifests (some deps resolve workspaces)
COPY packages ./packages

# Install dependencies (skip postinstall scripts until sources are copied)
RUN pnpm install --no-frozen-lockfile --ignore-scripts

# Copy source code
COPY . .

# Build common package first
RUN pnpm --filter @muralla/common build

# Generate Prisma client (now sources exist)
RUN pnpm -C muralla-backend exec prisma generate

# Re-run install to run any postinstall scripts safely after sources copied
RUN pnpm install --no-frozen-lockfile

# Build the application
RUN pnpm -C muralla-backend run build

# Production stage
FROM node:20-alpine AS production

# Install pnpm directly without corepack
RUN npm install -g pnpm@8.15.5

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Set working directory
WORKDIR /app

# Copy workspace manifests for install
COPY --from=base --chown=nestjs:nodejs /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=base --chown=nestjs:nodejs /app/package.json ./package.json
COPY --from=base --chown=nestjs:nodejs /app/pnpm-lock.yaml ./pnpm-lock.yaml

# Copy build artifacts and app files
COPY --from=base --chown=nestjs:nodejs /app/muralla-backend/dist ./muralla-backend/dist
COPY --from=base --chown=nestjs:nodejs /app/muralla-backend/package.json ./muralla-backend/package.json
COPY --from=base --chown=nestjs:nodejs /app/muralla-backend/prisma ./muralla-backend/prisma
COPY --from=base --chown=nestjs:nodejs /app/packages/common/dist ./packages/common/dist
COPY --from=base --chown=nestjs:nodejs /app/packages/common/package.json ./packages/common/package.json
COPY --from=base --chown=nestjs:nodejs /app/muralla-backend/vendor ./muralla-backend/vendor

# Install only production dependencies for backend
RUN pnpm -C muralla-backend install --prod --frozen-lockfile --ignore-scripts
# Ensure Prisma client exists in runtime node_modules
RUN pnpm -C muralla-backend exec prisma generate

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 3000) + '/health/healthz', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
# Ensure writable uploads directory and start app
RUN mkdir -p /app/uploads && chown -R nestjs:nodejs /app/uploads
CMD ["node", "muralla-backend/dist/main.js"]
