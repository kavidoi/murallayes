generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  permissions String[]
  createdBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  isDeleted   Boolean   @default(false)
  tenantId    String?
  users       User[]

  @@map("roles")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  isDeleted   Boolean     @default(false)
  tenantId    String?
  deadline    DateTime?
  kind        ProjectKind @default(DEADLINE)
  budgets     Budget[]
  tasks       Task[]

  @@map("projects")
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus     @default(PENDING)
  projectId    String
  assigneeId   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String?
  deletedAt    DateTime?
  deletedBy    String?
  isDeleted    Boolean        @default(false)
  tenantId     String?
  priority     TaskPriority   @default(MEDIUM)
  actualCost   Decimal?       @db.Decimal(10, 4)
  budgetLineId String?
  dueDate      DateTime?
  dueTime      String?
  orderIndex   Int            @default(0)
  parentTaskId String?
  comments     Comment[]
  assignees    TaskAssignee[]
  assignee     User?          @relation("TaskPrimaryAssignee", fields: [assigneeId], references: [id])
  budgetLine   BudgetLine?    @relation(fields: [budgetLineId], references: [id])
  parentTask   Task?          @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]         @relation("TaskSubtasks")
  project      Project        @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([assigneeId])
  @@index([parentTaskId])
  @@index([orderIndex])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  role      String   @default("assignee")
  tenantId  String?
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskAssignees", fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model Budget {
  id             String         @id @default(cuid())
  name           String
  description    String?
  projectId      String
  status         BudgetStatus   @default(DRAFT)
  category       BudgetCategory @default(OPEX)
  totalPlanned   Decimal        @db.Decimal(12, 4)
  totalCommitted Decimal        @default(0) @db.Decimal(12, 4)
  totalActual    Decimal        @default(0) @db.Decimal(12, 4)
  currency       String         @default("CLP")
  startDate      DateTime?
  endDate        DateTime?
  version        Int            @default(1)
  baseline       Json?
  tenantId       String?
  isDeleted      Boolean        @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lines          BudgetLine[]
  project        Project        @relation(fields: [projectId], references: [id])
  comments       Comment[]

  @@map("budgets")
}

model BudgetLine {
  id                 String    @id @default(cuid())
  budgetId           String
  name               String
  description        String?
  category           String?
  vendor             String?
  plannedAmount      Decimal   @db.Decimal(10, 4)
  committedAmount    Decimal   @default(0) @db.Decimal(10, 4)
  actualAmount       Decimal   @default(0) @db.Decimal(10, 4)
  unitPrice          Decimal?  @db.Decimal(10, 4)
  quantity           Decimal?  @db.Decimal(10, 4)
  dueDate            DateTime?
  isRecurring        Boolean   @default(false)
  recurringFrequency String?
  autoCreateTasks    Boolean   @default(false)
  tenantId           String?
  isDeleted          Boolean   @default(false)
  deletedAt          DateTime?
  deletedBy          String?
  createdBy          String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  budget             Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  comments           Comment[]
  tasks              Task[]

  @@map("budget_lines")
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  type         CommentType
  budgetId     String?
  budgetLineId String?
  taskId       String?
  authorId     String
  mentions     String[]
  attachments  Json?
  isEdited     Boolean     @default(false)
  editedAt     DateTime?
  tenantId     String?
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
  deletedBy    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  author       User        @relation("CommentAuthor", fields: [authorId], references: [id])
  budget       Budget?     @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetLine   BudgetLine? @relation(fields: [budgetLineId], references: [id], onDelete: Cascade)
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Document {
  id           String             @id @default(cuid())
  title        String
  content      String
  type         DocumentType
  authorId     String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdBy    String?
  deletedAt    DateTime?
  deletedBy    String?
  isDeleted    Boolean            @default(false)
  tenantId     String?
  lastViewedAt DateTime?
  parentId     String?
  publishedAt  DateTime?
  slug         String             @unique
  status       DocumentStatus     @default(DRAFT)
  summary      String?
  tags         String[]
  viewCount    Int                @default(0)
  revisions    DocumentRevision[]
  author       User               @relation(fields: [authorId], references: [id])
  parent       Document?          @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children     Document[]         @relation("DocumentHierarchy")

  @@map("documents")
}

model DocumentRevision {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  title      String
  content    String
  summary    String?
  changeLog  String?
  authorId   String
  tenantId   String?
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@map("document_revisions")
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  price               Float?               // Base café price
  stock               Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdBy           String?
  deletedAt           DateTime?
  deletedBy           String?
  isDeleted           Boolean              @default(false)
  tenantId            String?
  categoryId          String?
  isActive            Boolean              @default(true)
  sku                 String               @unique
  type                ProductType          @default(TERMINADO)
  unitCost            Decimal?             @db.Decimal(10, 4)
  uom                 String               @default("UN")
  
  // Phase 1: Multi-Platform Integration Fields
  displayName         String?              // Platform-specific display name
  images              String[]             // Array of image URLs
  
  // Platform External IDs
  rappiProductId      String?              // Rappi platform ID
  pedidosyaProductId  String?              // PedidosYa platform ID
  uberProductId       String?              // Uber Eats platform ID
  
  // Platform-Specific Pricing (in CLP)
  cafePrice           Decimal?             @db.Decimal(10, 2) // In-house café price
  rappiPrice          Decimal?             @db.Decimal(10, 2) // Rappi platform price
  pedidosyaPrice      Decimal?             @db.Decimal(10, 2) // PedidosYa platform price
  uberPrice           Decimal?             @db.Decimal(10, 2) // Uber Eats platform price
  
  // Min/Max Quantities (required by platforms)
  minOrderQuantity    Int                  @default(1)
  maxOrderQuantity    Int                  @default(100)
  
  // Platform Availability
  availableOnRappi    Boolean              @default(false)
  availableOnPedidosya Boolean            @default(false)
  availableOnUber     Boolean              @default(false)
  availableInCafe     Boolean              @default(true)
  
  bomUsedIn           BOMComponent[]       @relation("ComponentProduct")
  bomComponents       BOMComponent[]       @relation("ProductBOM")
  costLines           CostLine[]           @relation("ProductCostLines")
  inventoryMoves      InventoryMove[]      @relation("ProductInventoryMoves")
  category            ProductCategory?     @relation("ProductCategoryProducts", fields: [categoryId], references: [id])
  sales               Sale[]
  workOrderComponents WorkOrderComponent[]
  workOrders          WorkOrder[]          @relation("ProductWorkOrders")

  @@map("products")
}

model Sale {
  id        String    @id @default(cuid())
  productId String
  quantity  Int
  total     Float
  soldBy    String
  createdAt DateTime  @default(now())
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
  isDeleted Boolean   @default(false)
  tenantId  String?
  product   Product   @relation(fields: [productId], references: [id])
  seller    User      @relation(fields: [soldBy], references: [id])

  @@map("sales")
}

model BankAccount {
  id             String        @id @default(cuid())
  name           String
  accountNumber  String?
  bankName       String?
  accountType    String?
  currency       String        @default("ARS")
  currentBalance Float         @default(0)
  isActive       Boolean       @default(true)
  tenantId       String?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyId      String?
  company        Company?      @relation(fields: [companyId], references: [id])
  balanceHistory BankBalance[]
  costs          Cost[]        @relation("CostBankAccount")
  transactions   Transaction[]

  @@map("bank_accounts")
}

model TransactionCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  icon         String?
  color        String?
  description  String?
  isActive     Boolean       @default(true)
  tenantId     String?
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  deletedBy    String?
  createdBy    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("transaction_categories")
}

model Transaction {
  id                   String                @id @default(cuid())
  description          String
  amount               Float
  type                 TransactionType
  createdBy            String?
  createdAt            DateTime              @default(now())
  deletedAt            DateTime?
  deletedBy            String?
  isDeleted            Boolean               @default(false)
  updatedAt            DateTime              @updatedAt
  tenantId             String?
  accountId            String
  categoryId           String?
  customerName         String?
  employeeName         String?
  externalId           String?
  items                Json?
  mpPaymentId          String?               @unique
  mpPaymentType        String?
  mpStatus             String?
  notes                String?
  paymentMethod        PaymentMethod         @default(MERCADO_PAGO)
  projectName          String?
  receiptUrl           String?
  reference            String?               @unique
  status               TransactionStatus     @default(COMPLETED)
  supplierName         String?
  payrollId            String?
  companyId            String?
  costLinks            CostTransactionLink[] @relation("CostTransactionTransaction")
  expenseReimbursement EmployeeExpense?
  account              BankAccount           @relation(fields: [accountId], references: [id])
  category             TransactionCategory?  @relation(fields: [categoryId], references: [id])
  company              Company?              @relation(fields: [companyId], references: [id])
  creator              User?                 @relation(fields: [createdBy], references: [id])
  payroll              Payroll?              @relation(fields: [payrollId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([reference])
  @@map("transactions")
}

model BankBalance {
  id               String      @id @default(cuid())
  accountId        String
  balanceDate      DateTime    @unique
  openingBalance   Float       @default(0)
  closingBalance   Float       @default(0)
  totalIncome      Float       @default(0)
  totalExpenses    Float       @default(0)
  transactionCount Int         @default(0)
  tenantId         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  account          BankAccount @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([balanceDate])
  @@map("bank_balances")
}

model User {
  id                           String                 @id @default(cuid())
  email                        String                 @unique
  username                     String                 @unique
  firstName                    String
  lastName                     String
  password                     String
  isActive                     Boolean                @default(true)
  roleId                       String
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  createdBy                    String?
  deletedAt                    DateTime?
  deletedBy                    String?
  isDeleted                    Boolean                @default(false)
  tenantId                     String?
  refreshToken                 String?
  attachmentsUploaded          Attachment[]           @relation("AttachmentUploader")
  auditTrails                  AuditTrail[]
  comments                     Comment[]              @relation("CommentAuthor")
  costTransactionLinksCreated  CostTransactionLink[]  @relation("CostTransactionLinkCreator")
  costsCreated                 Cost[]                 @relation("CostCreator")
  costsAsStaff                 Cost[]                 @relation("CostStaff")
  documentRevisions            DocumentRevision[]
  documents                    Document[]
  employeeExpenses             EmployeeExpense[]      @relation("EmployeeExpenseEmployee")
  expenseReviews               EmployeeExpense[]      @relation("ExpenseReviewer")
  inventoryMovesCreated        InventoryMove[]        @relation("InventoryMoveCreator")
  magicTokens                  MagicToken[]
  notificationRulesCreated     NotificationRule[]     @relation("NotificationRuleCreator")
  notificationTemplatesCreated NotificationTemplate[] @relation("NotificationTemplateCreator")
  notifications                Notification[]         @relation("NotificationRecipient")
  payrollEntries               PayrollEntry[]         @relation("PayrollEmployee")
  payrollsApproved             Payroll[]              @relation("PayrollApprover")
  payrollsProcessed            Payroll[]              @relation("PayrollProcessor")
  ptoBalances                  PTOBalance?            @relation("PTOBalanceEmployee")
  ptoApprovals                 PTORequest[]           @relation("PTOApprover")
  ptoRequests                  PTORequest[]           @relation("PTOEmployee")
  salaryAdjustmentsApproved    SalaryAdjustment[]     @relation("SalaryAdjustmentApprover")
  salaryAdjustments            SalaryAdjustment[]     @relation("SalaryAdjustmentEmployee")
  sales                        Sale[]
  taskAssignments              TaskAssignee[]         @relation("TaskAssignees")
  tasks                        Task[]                 @relation("TaskPrimaryAssignee")
  transactions                 Transaction[]
  role                         Role                   @relation(fields: [roleId], references: [id])
  workOrdersCreated            WorkOrder[]            @relation("WorkOrderCreator")

  @@map("users")
}

model MagicToken {
  id        String    @id @default(cuid())
  userId    String
  purpose   String
  tokenHash String
  expiresAt DateTime
  tenantId  String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("magic_tokens")
}

model AuditTrail {
  id         String         @id @default(cuid())
  tableName  String
  recordId   String
  operation  AuditOperation
  beforeData Json?
  afterData  Json?
  userId     String?
  timestamp  DateTime       @default(now())
  ipAddress  String?
  userAgent  String?
  tenantId   String?
  user       User?          @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_trail")
}

model NotificationTemplate {
  id            String             @id @default(cuid())
  name          String             @unique
  description   String?
  type          NotificationType
  subject       String?
  content       String
  variables     String[]
  isActive      Boolean            @default(true)
  createdBy     String
  tenantId      String?
  isDeleted     Boolean            @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  rules         NotificationRule[]
  creator       User               @relation("NotificationTemplateCreator", fields: [createdBy], references: [id])
  notifications Notification[]

  @@map("notification_templates")
}

model NotificationRule {
  id            String               @id @default(cuid())
  name          String
  description   String?
  trigger       RuleTrigger
  conditions    Json
  isActive      Boolean              @default(true)
  templateId    String
  recipients    Json
  delay         Int?
  createdBy     String
  tenantId      String?
  isDeleted     Boolean              @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  creator       User                 @relation("NotificationRuleCreator", fields: [createdBy], references: [id])
  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  notifications Notification[]

  @@map("notification_rules")
}

model Notification {
  id           String                @id @default(cuid())
  type         NotificationType
  status       NotificationStatus    @default(PENDING)
  subject      String?
  content      String
  recipientId  String
  templateId   String?
  ruleId       String?
  entityType   String?
  entityId     String?
  metadata     Json?
  scheduledAt  DateTime?
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  readAt       DateTime?
  tenantId     String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  recipient    User                  @relation("NotificationRecipient", fields: [recipientId], references: [id])
  rule         NotificationRule?     @relation(fields: [ruleId], references: [id])
  template     NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([recipientId, status])
  @@index([scheduledAt])
  @@index([entityType, entityId])
  @@map("notifications")
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  taxId        String?
  address      String?
  phone        String?
  email        String?
  isActive     Boolean       @default(true)
  tenantId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bankAccounts BankAccount[]
  costs        Cost[]
  locations    Location[]
  transactions Transaction[]
  workOrders   WorkOrder[]

  @@map("companies")
}

model Vendor {
  id           String   @id @default(cuid())
  name         String
  taxId        String?
  phone        String?
  email        String?
  address      String?
  contactName  String?
  paymentTerms String?
  isActive     Boolean  @default(true)
  tenantId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  costs        Cost[]

  @@map("vendors")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  color       String?
  emoji       String?
  isInventory Boolean           @default(false)
  parentId    String?
  isActive    Boolean           @default(true)
  tenantId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  costs       Cost[]
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]         @relation("ProductCategoryProducts")

  @@map("product_categories")
}

model Cost {
  id                  String                @id @default(cuid())
  companyId           String
  categoryId          String?
  vendorId            String?
  docType             DocumentKind
  docNumber           String?
  date                DateTime
  total               Decimal               @db.Decimal(12, 2)
  currency            String                @default("CLP")
  payerType           PayerType             @default(COMPANY)
  payerCompanyId      String?
  staffId             String?
  bankAccountId       String?
  description         String?
  status              CostStatus            @default(PENDING)
  reimbursementStatus ReimbursementStatus?
  tenantId            String?
  createdBy           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  attachments         Attachment[]
  lines               CostLine[]
  links               CostTransactionLink[]
  bankAccount         BankAccount?          @relation("CostBankAccount", fields: [bankAccountId], references: [id])
  category            ProductCategory?      @relation(fields: [categoryId], references: [id])
  company             Company               @relation(fields: [companyId], references: [id])
  creator             User?                 @relation("CostCreator", fields: [createdBy], references: [id])
  staff               User?                 @relation("CostStaff", fields: [staffId], references: [id])
  vendor              Vendor?               @relation(fields: [vendorId], references: [id])

  @@index([companyId])
  @@index([categoryId])
  @@index([vendorId])
  @@index([date])
  @@map("costs")
}

model CostLine {
  id          String    @id @default(cuid())
  costId      String
  productId   String?
  isInventory Boolean   @default(false)
  quantity    Decimal?  @db.Decimal(12, 3)
  unitCost    Decimal?  @db.Decimal(12, 4)
  totalCost   Decimal   @db.Decimal(12, 2)
  locationId  String?
  description String?
  createdAt   DateTime  @default(now())
  cost        Cost      @relation(fields: [costId], references: [id], onDelete: Cascade)
  location    Location? @relation("CostLineLocation", fields: [locationId], references: [id])
  product     Product?  @relation("ProductCostLines", fields: [productId], references: [id])

  @@index([costId])
  @@index([productId])
  @@map("cost_lines")
}

model Attachment {
  id         String   @id @default(cuid())
  costId     String
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int?
  ocrData    Json?
  uploadedBy String
  uploadedAt DateTime @default(now())
  cost       Cost     @relation(fields: [costId], references: [id], onDelete: Cascade)
  uploader   User     @relation("AttachmentUploader", fields: [uploadedBy], references: [id])

  @@index([costId])
  @@map("attachments")
}

model Location {
  id                 String          @id @default(cuid())
  name               String
  type               LocationType
  address            String?
  companyId          String
  isActive           Boolean         @default(true)
  tenantId           String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  costLines          CostLine[]      @relation("CostLineLocation")
  inventoryMovesFrom InventoryMove[] @relation("MoveFromLocation")
  inventoryMovesTo   InventoryMove[] @relation("MoveToLocation")
  company            Company         @relation(fields: [companyId], references: [id])
  workOrders         WorkOrder[]     @relation("WorkOrderLocation")

  @@map("locations")
}

model InventoryMove {
  id             String            @id @default(cuid())
  type           InventoryMoveType
  productId      String
  fromLocationId String?
  toLocationId   String?
  quantity       Decimal           @db.Decimal(12, 3)
  unitCost       Decimal?          @db.Decimal(12, 4)
  totalCost      Decimal?          @db.Decimal(12, 2)
  reason         String?
  referenceType  String?
  referenceId    String?
  lotCode        String?
  expiryDate     DateTime?
  createdBy      String
  createdAt      DateTime          @default(now())
  creator        User              @relation("InventoryMoveCreator", fields: [createdBy], references: [id])
  fromLocation   Location?         @relation("MoveFromLocation", fields: [fromLocationId], references: [id])
  product        Product           @relation("ProductInventoryMoves", fields: [productId], references: [id])
  toLocation     Location?         @relation("MoveToLocation", fields: [toLocationId], references: [id])

  @@index([productId])
  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([createdAt])
  @@map("inventory_moves")
}

model BOMComponent {
  id          String   @id @default(cuid())
  productId   String
  componentId String
  quantity    Decimal  @db.Decimal(12, 3)
  uom         String
  unitCost    Decimal? @db.Decimal(12, 4)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  component   Product  @relation("ComponentProduct", fields: [componentId], references: [id])
  product     Product  @relation("ProductBOM", fields: [productId], references: [id])

  @@unique([productId, componentId])
  @@map("bom_components")
}

model WorkOrder {
  id           String               @id @default(cuid())
  companyId    String
  productId    String
  locationId   String
  qtyPlanned   Decimal              @db.Decimal(12, 3)
  qtyProduced  Decimal?             @db.Decimal(12, 3)
  qtyScrap     Decimal?             @db.Decimal(12, 3)
  lotCode      String?
  status       WorkOrderStatus      @default(PLANNED)
  plannedCost  Decimal?             @db.Decimal(12, 2)
  actualCost   Decimal?             @db.Decimal(12, 2)
  yieldPercent Decimal?             @db.Decimal(5, 2)
  startedAt    DateTime?
  finishedAt   DateTime?
  notes        String?
  createdBy    String
  tenantId     String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  components   WorkOrderComponent[]
  company      Company              @relation(fields: [companyId], references: [id])
  creator      User                 @relation("WorkOrderCreator", fields: [createdBy], references: [id])
  location     Location             @relation("WorkOrderLocation", fields: [locationId], references: [id])
  product      Product              @relation("ProductWorkOrders", fields: [productId], references: [id])

  @@index([productId])
  @@index([locationId])
  @@index([status])
  @@map("work_orders")
}

model WorkOrderComponent {
  id          String    @id @default(cuid())
  workOrderId String
  productId   String
  qtyPlanned  Decimal   @db.Decimal(12, 3)
  qtyConsumed Decimal?  @db.Decimal(12, 3)
  unitCost    Decimal?  @db.Decimal(12, 4)
  totalCost   Decimal?  @db.Decimal(12, 2)
  createdAt   DateTime  @default(now())
  product     Product   @relation(fields: [productId], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_components")
}

model CostTransactionLink {
  id            String      @id @default(cuid())
  costId        String
  transactionId String
  amount        Decimal?    @db.Decimal(12, 2)
  createdBy     String
  createdAt     DateTime    @default(now())
  cost          Cost        @relation(fields: [costId], references: [id], onDelete: Cascade)
  creator       User        @relation("CostTransactionLinkCreator", fields: [createdBy], references: [id])
  transaction   Transaction @relation("CostTransactionTransaction", fields: [transactionId], references: [id], onDelete: Cascade)

  @@unique([costId, transactionId])
  @@index([transactionId])
  @@map("cost_transaction_links")
}

model Payroll {
  id              String         @id @default(cuid())
  runDate         DateTime
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  status          PayrollStatus  @default(DRAFT)
  totalGrossPay   Decimal        @db.Decimal(12, 2)
  totalDeductions Decimal        @db.Decimal(12, 2)
  totalNetPay     Decimal        @db.Decimal(12, 2)
  notes           String?
  approvedBy      String?
  approvedAt      DateTime?
  processedBy     String?
  processedAt     DateTime?
  tenantId        String?
  isDeleted       Boolean        @default(false)
  deletedAt       DateTime?
  deletedBy       String?
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  payrollEntries  PayrollEntry[]
  approver        User?          @relation("PayrollApprover", fields: [approvedBy], references: [id])
  processor       User?          @relation("PayrollProcessor", fields: [processedBy], references: [id])
  transactions    Transaction[]

  @@index([runDate])
  @@index([status])
  @@index([payPeriodStart, payPeriodEnd])
  @@map("payrolls")
}

model PayrollEntry {
  id              String    @id @default(cuid())
  payrollId       String
  employeeId      String
  baseSalary      Decimal   @db.Decimal(10, 2)
  hoursWorked     Decimal?  @db.Decimal(5, 2)
  overtimeHours   Decimal?  @db.Decimal(5, 2)
  bonusAmount     Decimal?  @db.Decimal(10, 2)
  allowances      Decimal?  @db.Decimal(10, 2)
  grossPay        Decimal   @db.Decimal(10, 2)
  taxDeductions   Decimal   @db.Decimal(10, 2)
  socialSecurity  Decimal   @db.Decimal(10, 2)
  otherDeductions Decimal?  @db.Decimal(10, 2)
  netPay          Decimal   @db.Decimal(10, 2)
  notes           String?
  tenantId        String?
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  deletedBy       String?
  createdBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  employee        User      @relation("PayrollEmployee", fields: [employeeId], references: [id])
  payroll         Payroll   @relation(fields: [payrollId], references: [id])

  @@unique([payrollId, employeeId])
  @@index([payrollId])
  @@index([employeeId])
  @@map("payroll_entries")
}

model SalaryAdjustment {
  id             String               @id @default(cuid())
  employeeId     String
  adjustmentType SalaryAdjustmentType
  previousAmount Decimal              @db.Decimal(10, 2)
  newAmount      Decimal              @db.Decimal(10, 2)
  effectiveDate  DateTime
  reason         String
  notes          String?
  approvedBy     String?
  approvedAt     DateTime?
  tenantId       String?
  isDeleted      Boolean              @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  approver       User?                @relation("SalaryAdjustmentApprover", fields: [approvedBy], references: [id])
  employee       User                 @relation("SalaryAdjustmentEmployee", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([effectiveDate])
  @@index([adjustmentType])
  @@map("salary_adjustments")
}

model EmployeeExpense {
  id                         String        @id @default(cuid())
  employeeId                 String
  description                String
  amount                     Decimal       @db.Decimal(10, 2)
  category                   String
  expenseDate                DateTime
  receiptUrl                 String?
  status                     ExpenseStatus @default(PENDING)
  submittedAt                DateTime?
  reviewedBy                 String?
  reviewedAt                 DateTime?
  reimbursedAt               DateTime?
  reimbursementTransactionId String?       @unique
  notes                      String?
  tenantId                   String?
  isDeleted                  Boolean       @default(false)
  deletedAt                  DateTime?
  deletedBy                  String?
  createdBy                  String?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  employee                   User          @relation("EmployeeExpenseEmployee", fields: [employeeId], references: [id])
  reimbursementTransaction   Transaction?  @relation(fields: [reimbursementTransactionId], references: [id])
  reviewer                   User?         @relation("ExpenseReviewer", fields: [reviewedBy], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([expenseDate])
  @@index([category])
  @@map("employee_expenses")
}

model PTORequest {
  id          String    @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  totalDays   Decimal   @db.Decimal(5, 2)
  status      PTOStatus @default(DRAFT)
  reason      String?
  submittedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  cancelledAt DateTime?
  tenantId    String?
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  approver    User?     @relation("PTOApprover", fields: [approvedBy], references: [id])
  employee    User      @relation("PTOEmployee", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("pto_requests")
}

model PTOBalance {
  id            String    @id @default(cuid())
  employeeId    String    @unique
  year          Int
  totalDays     Decimal   @db.Decimal(5, 2)
  usedDays      Decimal   @default(0) @db.Decimal(5, 2)
  carryOverDays Decimal   @default(0) @db.Decimal(5, 2)
  tenantId      String?
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  employee      User      @relation("PTOBalanceEmployee", fields: [employeeId], references: [id])

  @@unique([employeeId, year])
  @@index([year])
  @@map("pto_balances")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectKind {
  DEADLINE
  CORE
}

enum BudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  LOCKED
  CANCELLED
}

enum BudgetCategory {
  OPEX
  CAPEX
  REVENUE
  OTHER
}

enum CommentType {
  BUDGET
  BUDGET_LINE
  TASK
  PROJECT
}

enum DocumentType {
  WIKI
  SOP
  PLAYBOOK
  TEMPLATE
}

enum DocumentStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  MERCADO_PAGO
  BANK_TRANSFER
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  OTHER
}

enum AuditOperation {
  CREATE
  UPDATE
  DELETE
  RESTORE
}

enum NotificationType {
  EMAIL
  PUSH
  IN_APP
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum RuleTrigger {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  USER_REGISTERED
  PROJECT_CREATED
  DEADLINE_APPROACHING
  STOCK_LOW
  CUSTOM
}

enum LocationType {
  WAREHOUSE
  STORE
  PRODUCTION
  OFFICE
}

enum ProductType {
  INSUMO
  TERMINADO
  SERVICIO
}

enum InventoryMoveType {
  ENTRADA_COMPRA
  ENTRADA_PRODUCCION
  SALIDA_PRODUCCION
  SALIDA_VENTA
  TRASLADO
  AJUSTE
  MERMA
  DEVOLUCION
}

enum DocumentKind {
  FACTURA
  BOLETA
  RECIBO
  OTRO
}

enum PayerType {
  COMPANY
  STAFF
}

enum CostStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  PAID
}

enum WorkOrderStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PTOStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PROCESSED
  CANCELLED
}

enum SalaryAdjustmentType {
  SALARY_INCREASE
  SALARY_DECREASE
  BONUS
  ALLOWANCE_CHANGE
  PROMOTION
  DEMOTION
  ANNUAL_REVIEW
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
  CANCELLED
}
