generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  permissions String[]
  createdBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  isDeleted   Boolean   @default(false)
  tenantId    String?
  users       User[]

  @@map("roles")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  isDeleted   Boolean     @default(false)
  tenantId    String?
  deadline    DateTime?
  kind        ProjectKind @default(DEADLINE)
  // REMOVED: budgets Budget[] - now handled by EntityRelationship system
  tasks       Task[]

  @@map("projects")
}

model Task {
  id                   String         @id @default(cuid())
  title                String
  description          String?
  status               TaskStatus     @default(PENDING)
  projectId            String
  // REMOVED: assigneeId String? - now handled by EntityRelationship system only
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  createdBy            String?
  deletedAt            DateTime?
  deletedBy            String?
  isDeleted            Boolean        @default(false)
  tenantId             String?
  priority             TaskPriority   @default(MEDIUM)
  actualCost           Decimal?       @db.Decimal(10, 4)
  budgetLineId         String?
  dueDate              DateTime?
  dueTime              String?
  orderIndex           Int            @default(0)
  parentTaskId         String?
  // Intelligent status tracking fields
  dueDateModifiedAt    DateTime?
  statusModifiedByUser Boolean        @default(false)
  wasEnProgreso        Boolean        @default(false)
  comments     Comment[]
  // REMOVED: assignees TaskAssignee[] - now handled by EntityRelationship system
  // REMOVED: assignee relation - now handled by EntityRelationship system only
  budgetLine   BudgetLine?    @relation(fields: [budgetLineId], references: [id])
  parentTask   Task?          @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]         @relation("TaskSubtasks")
  project      Project        @relation(fields: [projectId], references: [id])

  @@index([projectId])
  // REMOVED: @@index([assigneeId]) - field no longer exists
  @@index([parentTaskId])
  @@index([orderIndex])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

// REMOVED: TaskAssignee - migrated to EntityRelationship system
// All task assignments now handled through Universal Relationship system

model Budget {
  id             String         @id @default(cuid())
  name           String
  description    String?
  // REMOVED: projectId String - now handled by EntityRelationship system
  status         BudgetStatus   @default(DRAFT)
  category       BudgetCategory @default(OPEX)
  totalPlanned   Decimal        @db.Decimal(12, 4)
  totalCommitted Decimal        @default(0) @db.Decimal(12, 4)
  totalActual    Decimal        @default(0) @db.Decimal(12, 4)
  currency       String         @default("CLP")
  startDate      DateTime?
  endDate        DateTime?
  version        Int            @default(1)
  baseline       Json?
  tenantId       String?
  isDeleted      Boolean        @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lines          BudgetLine[]
  // REMOVED: project Project - now handled by EntityRelationship system
  comments       Comment[]

  @@map("budgets")
}

model BudgetLine {
  id                 String    @id @default(cuid())
  budgetId           String
  name               String
  description        String?
  category           String?
  vendor             String?
  plannedAmount      Decimal   @db.Decimal(10, 4)
  committedAmount    Decimal   @default(0) @db.Decimal(10, 4)
  actualAmount       Decimal   @default(0) @db.Decimal(10, 4)
  unitPrice          Decimal?  @db.Decimal(10, 4)
  quantity           Decimal?  @db.Decimal(10, 4)
  dueDate            DateTime?
  isRecurring        Boolean   @default(false)
  recurringFrequency String?
  autoCreateTasks    Boolean   @default(false)
  tenantId           String?
  isDeleted          Boolean   @default(false)
  deletedAt          DateTime?
  deletedBy          String?
  createdBy          String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  budget             Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  comments           Comment[]
  tasks              Task[]

  @@map("budget_lines")
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  type         CommentType
  budgetId     String?
  budgetLineId String?
  taskId       String?
  authorId     String
  mentions     String[]
  attachments  Json?
  isEdited     Boolean     @default(false)
  editedAt     DateTime?
  tenantId     String?
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
  deletedBy    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  author       User        @relation("CommentAuthor", fields: [authorId], references: [id])
  budget       Budget?     @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetLine   BudgetLine? @relation(fields: [budgetLineId], references: [id], onDelete: Cascade)
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Document {
  id           String             @id @default(cuid())
  title        String
  content      String
  type         DocumentType
  authorId     String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdBy    String?
  deletedAt    DateTime?
  deletedBy    String?
  isDeleted    Boolean            @default(false)
  tenantId     String?
  lastViewedAt DateTime?
  parentId     String?
  publishedAt  DateTime?
  slug         String             @unique
  status       DocumentStatus     @default(DRAFT)
  summary      String?
  tags         String[]
  viewCount    Int                @default(0)
  revisions    DocumentRevision[]
  author       User               @relation(fields: [authorId], references: [id])
  parent       Document?          @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children     Document[]         @relation("DocumentHierarchy")

  @@map("documents")
}

model DocumentRevision {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  title      String
  content    String
  summary    String?
  changeLog  String?
  authorId   String
  tenantId   String?
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@map("document_revisions")
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  price               Float?               // Base café price
  stock               Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdBy           String?
  deletedAt           DateTime?
  deletedBy           String?
  isDeleted           Boolean              @default(false)
  tenantId            String?
  // REMOVED: categoryId String? - now handled by EntityRelationship system
  isActive            Boolean              @default(true)
  sku                 String               @unique
  type                ProductType          @default(TERMINADO)
  unitCost            Decimal?             @db.Decimal(10, 4)
  uom                 String               @default("UN")
  
  // Brand Management
  // REMOVED: brandId String? - now handled by EntityRelationship system only
  brandName           String?              // Or simple brand name string
  
  // Product Classification for SKU Generation
  format              ProductFormat?       // Envasados (100), Congelados (200), Frescos (300)
  extras              ProductExtra[]       // Vegano (8), Sin Azucar (9), Sin Gluten (6), Keto (7)
  
  // Phase 1: Multi-Platform Integration Fields
  displayName         String?              // Platform-specific display name
  images              String[]             // Array of image URLs
  
  // Platform External IDs
  rappiProductId      String?              // Rappi platform ID
  pedidosyaProductId  String?              // PedidosYa platform ID
  uberProductId       String?              // Uber Eats platform ID
  
  // Platform Sync Timestamps
  rappiLastSync       DateTime?            // Last sync with Rappi
  pedidosyaLastSync   DateTime?            // Last sync with PedidosYa
  uberLastSync        DateTime?            // Last sync with Uber Eats
  
  // Platform-Specific Pricing (in CLP)
  cafePrice           Decimal?             @db.Decimal(10, 2) // In-house café price
  rappiPrice          Decimal?             @db.Decimal(10, 2) // Rappi platform price
  pedidosyaPrice      Decimal?             @db.Decimal(10, 2) // PedidosYa platform price
  uberPrice           Decimal?             @db.Decimal(10, 2) // Uber Eats platform price
  
  // Min/Max Quantities (required by platforms)
  minOrderQuantity    Int                  @default(1)
  maxOrderQuantity    Int                  @default(100)
  
  // Platform Availability
  availableOnRappi    Boolean              @default(false)
  availableOnPedidosya Boolean            @default(false)
  availableOnUber     Boolean              @default(false)
  availableInCafe     Boolean              @default(true)
  
  bomUsedIn           BOMComponent[]       @relation("ComponentProduct")
  bomComponents       BOMComponent[]       @relation("ProductBOM")
  costLines           CostLine[]           @relation("ProductCostLines")
  inventoryMoves      InventoryMove[]      @relation("ProductInventoryMoves")
  // REMOVED: category ProductCategory? - now handled by EntityRelationship system
  sales               Sale[]
  workOrderComponents WorkOrderComponent[]
  // REMOVED: workOrders WorkOrder[] @relation("ProductWorkOrders") - now handled by EntityRelationship system
  purchaseOrderLines  PurchaseOrderLine[]
  
  // REMOVED: brand relation - now handled by EntityRelationship system only
  
  // Recipe-based product relationships
  recipes             Recipe[]             @relation("ProductRecipes")
  recipeIngredients   RecipeIngredient[]   @relation("IngredientProduct")
  variants            ProductVariant[]     @relation("ProductVariants")
  ingredientUsage     IngredientUsage[]    @relation("UsedIngredient")
  preparedProducts    IngredientUsage[]    @relation("PreparedProduct")
  
  // POS integration
  posTransactionItems POSTransactionItem[] @relation("POSItemProduct")

  @@map("products")
}

model Sale {
  id        String    @id @default(cuid())
  productId String
  quantity  Int
  total     Float
  soldBy    String
  createdAt DateTime  @default(now())
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
  isDeleted Boolean   @default(false)
  tenantId  String?
  product   Product   @relation(fields: [productId], references: [id])
  seller    User      @relation(fields: [soldBy], references: [id])

  @@map("sales")
}

// Recipe-based product system
model Recipe {
  id          String             @id @default(cuid())
  name        String
  description String?
  productId   String
  isDefault   Boolean            @default(true)
  servingSize Int                @default(1)
  prepTime    Int?               // in minutes
  difficulty  RecipeDifficulty   @default(EASY)
  instructions String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String?
  tenantId    String?
  isDeleted   Boolean            @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  
  product     Product            @relation("ProductRecipes", fields: [productId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredient[] @relation("RecipeIngredients")
  variants    ProductVariant[]   @relation("VariantRecipes")
  
  @@index([productId])
  @@map("recipes")
}

model RecipeIngredient {
  id           String   @id @default(cuid())
  recipeId     String
  ingredientId String   // References Product with type INSUMO
  quantity     Decimal  @db.Decimal(10, 4)
  unit         String   @default("UN")
  isOptional   Boolean  @default(false)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String?
  
  recipe     Recipe  @relation("RecipeIngredients", fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Product @relation("IngredientProduct", fields: [ingredientId], references: [id])
  
  @@unique([recipeId, ingredientId])
  @@index([recipeId])
  @@index([ingredientId])
  @@map("recipe_ingredients")
}

model ProductVariant {
  id          String   @id @default(cuid())
  name        String
  description String?
  productId   String
  recipeId    String?
  priceAdjustment Decimal? @db.Decimal(10, 2) // Price difference from base product
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  tenantId    String?
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  
  product Product @relation("ProductVariants", fields: [productId], references: [id], onDelete: Cascade)
  recipe  Recipe? @relation("VariantRecipes", fields: [recipeId], references: [id])
  sales   VariantSale[] @relation("VariantSales")
  ingredientUsage IngredientUsage[] @relation("VariantUsage")
  
  @@index([productId])
  @@index([recipeId])
  @@map("product_variants")
}

// Track ingredient usage for analytics
model IngredientUsage {
  id           String   @id @default(cuid())
  ingredientId String
  productId    String   // The prepared product that used this ingredient
  variantId    String?  // If a specific variant was used
  quantity     Decimal  @db.Decimal(10, 4)
  unit         String
  usedAt       DateTime @default(now())
  saleId       String?  // Link to sale if applicable
  cost         Decimal? @db.Decimal(10, 4) // Cost of ingredient at time of use
  tenantId     String?
  createdBy    String?
  
  ingredient Product       @relation("UsedIngredient", fields: [ingredientId], references: [id])
  product    Product       @relation("PreparedProduct", fields: [productId], references: [id])
  variant    ProductVariant? @relation("VariantUsage", fields: [variantId], references: [id])
  
  @@index([ingredientId])
  @@index([productId])
  @@index([usedAt])
  @@map("ingredient_usage")
}

// Enhanced sales to support variants
model VariantSale {
  id        String         @id @default(cuid())
  variantId String
  quantity  Int
  total     Decimal        @db.Decimal(10, 2)
  soldBy    String
  saleDate  DateTime       @default(now())
  createdAt DateTime       @default(now())
  createdBy String?
  tenantId  String?
  isDeleted Boolean        @default(false)
  deletedAt DateTime?
  deletedBy String?
  
  variant ProductVariant @relation("VariantSales", fields: [variantId], references: [id])
  seller  User           @relation(fields: [soldBy], references: [id])
  
  @@index([variantId])
  @@index([saleDate])
  @@map("variant_sales")
}

model BankAccount {
  id             String        @id @default(cuid())
  name           String
  accountNumber  String?
  bankName       String?
  accountType    String?
  currency       String        @default("ARS")
  currentBalance Float         @default(0)
  isActive       Boolean       @default(true)
  tenantId       String?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyId      String?
  company        Company?      @relation(fields: [companyId], references: [id])
  balanceHistory BankBalance[]
  costs          Cost[]        @relation("CostBankAccount")
  transactions   Transaction[]

  @@map("bank_accounts")
}

model TransactionCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  icon         String?
  color        String?
  description  String?
  isActive     Boolean       @default(true)
  tenantId     String?
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  deletedBy    String?
  createdBy    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("transaction_categories")
}

model Transaction {
  id                   String                @id @default(cuid())
  description          String
  amount               Float
  type                 TransactionType
  createdBy            String?
  createdAt            DateTime              @default(now())
  deletedAt            DateTime?
  deletedBy            String?
  isDeleted            Boolean               @default(false)
  updatedAt            DateTime              @updatedAt
  tenantId             String?
  accountId            String
  categoryId           String?
  customerName         String?
  employeeName         String?
  externalId           String?
  items                Json?
  mpPaymentId          String?               @unique
  mpPaymentType        String?
  mpStatus             String?
  notes                String?
  paymentMethod        PaymentMethod         @default(MERCADO_PAGO)
  projectName          String?
  receiptUrl           String?
  reference            String?               @unique
  status               TransactionStatus     @default(COMPLETED)
  supplierName         String?
  payrollId            String?
  companyId            String?
  costLinks            CostTransactionLink[] @relation("CostTransactionTransaction")
  expenseReimbursement EmployeeExpense?
  account              BankAccount           @relation(fields: [accountId], references: [id])
  category             TransactionCategory?  @relation(fields: [categoryId], references: [id])
  company              Company?              @relation(fields: [companyId], references: [id])
  creator              User?                 @relation(fields: [createdBy], references: [id])
  payroll              Payroll?              @relation(fields: [payrollId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([reference])
  @@map("transactions")
}

model BankBalance {
  id               String      @id @default(cuid())
  accountId        String
  balanceDate      DateTime    @unique
  openingBalance   Float       @default(0)
  closingBalance   Float       @default(0)
  totalIncome      Float       @default(0)
  totalExpenses    Float       @default(0)
  transactionCount Int         @default(0)
  tenantId         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  account          BankAccount @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([balanceDate])
  @@map("bank_balances")
}

model User {
  id                           String                 @id @default(cuid())
  email                        String                 @unique
  username                     String                 @unique
  firstName                    String
  lastName                     String
  password                     String
  isActive                     Boolean                @default(true)
  roleId                       String
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  createdBy                    String?
  deletedAt                    DateTime?
  deletedBy                    String?
  isDeleted                    Boolean                @default(false)
  tenantId                     String?
  refreshToken                 String?
  attachmentsUploaded          Attachment[]           @relation("AttachmentUploader")
  auditTrails                  AuditTrail[]
  comments                     Comment[]              @relation("CommentAuthor")
  costTransactionLinksCreated  CostTransactionLink[]  @relation("CostTransactionLinkCreator")
  costsCreated                 Cost[]                 @relation("CostCreator")
  costsAsStaff                 Cost[]                 @relation("CostStaff")
  documentRevisions            DocumentRevision[]
  documents                    Document[]
  employeeExpenses             EmployeeExpense[]      @relation("EmployeeExpenseEmployee")
  expenseReviews               EmployeeExpense[]      @relation("ExpenseReviewer")
  inventoryMovesCreated        InventoryMove[]        @relation("InventoryMoveCreator")
  magicTokens                  MagicToken[]
  notificationRulesCreated     NotificationRule[]     @relation("NotificationRuleCreator")
  notificationTemplatesCreated NotificationTemplate[] @relation("NotificationTemplateCreator")
  notifications                Notification[]         @relation("NotificationRecipient")
  payrollEntries               PayrollEntry[]         @relation("PayrollEmployee")
  payrollsApproved             Payroll[]              @relation("PayrollApprover")
  payrollsProcessed            Payroll[]              @relation("PayrollProcessor")
  ptoBalances                  PTOBalance?            @relation("PTOBalanceEmployee")
  ptoApprovals                 PTORequest[]           @relation("PTOApprover")
  ptoRequests                  PTORequest[]           @relation("PTOEmployee")
  salaryAdjustmentsApproved    SalaryAdjustment[]     @relation("SalaryAdjustmentApprover")
  salaryAdjustments            SalaryAdjustment[]     @relation("SalaryAdjustmentEmployee")
  sales                        Sale[]
  // REMOVED: taskAssignments TaskAssignee[] - now handled by EntityRelationship system
  // REMOVED: tasks relation - now handled by EntityRelationship system only
  transactions                 Transaction[]
  role                         Role                   @relation(fields: [roleId], references: [id])
  workOrdersCreated            WorkOrder[]            @relation("WorkOrderCreator")
  calendarEventsCreated        CalendarEvent[]        @relation("CalendarEventCreator")
  staffShifts                  StaffShift[]           @relation("StaffShiftUser")
  variantSales                 VariantSale[]

  @@map("users")
}

model MagicToken {
  id        String    @id @default(cuid())
  userId    String
  purpose   String
  tokenHash String
  expiresAt DateTime
  tenantId  String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("magic_tokens")
}

model AuditTrail {
  id         String         @id @default(cuid())
  tableName  String
  recordId   String
  operation  AuditOperation
  beforeData Json?
  afterData  Json?
  userId     String?
  timestamp  DateTime       @default(now())
  ipAddress  String?
  userAgent  String?
  tenantId   String?
  user       User?          @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_trail")
}

model NotificationTemplate {
  id            String             @id @default(cuid())
  name          String             @unique
  description   String?
  type          NotificationType
  subject       String?
  content       String
  variables     String[]
  isActive      Boolean            @default(true)
  createdBy     String
  tenantId      String?
  isDeleted     Boolean            @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  rules         NotificationRule[]
  creator       User               @relation("NotificationTemplateCreator", fields: [createdBy], references: [id])
  notifications Notification[]

  @@map("notification_templates")
}

model NotificationRule {
  id            String               @id @default(cuid())
  name          String
  description   String?
  trigger       RuleTrigger
  conditions    Json
  isActive      Boolean              @default(true)
  templateId    String
  recipients    Json
  delay         Int?
  createdBy     String
  tenantId      String?
  isDeleted     Boolean              @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  creator       User                 @relation("NotificationRuleCreator", fields: [createdBy], references: [id])
  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  notifications Notification[]

  @@map("notification_rules")
}

model Notification {
  id           String                @id @default(cuid())
  type         NotificationType
  status       NotificationStatus    @default(PENDING)
  subject      String?
  content      String
  recipientId  String
  templateId   String?
  ruleId       String?
  entityType   String?
  entityId     String?
  metadata     Json?
  scheduledAt  DateTime?
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  readAt       DateTime?
  tenantId     String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  recipient    User                  @relation("NotificationRecipient", fields: [recipientId], references: [id])
  rule         NotificationRule?     @relation(fields: [ruleId], references: [id])
  template     NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([recipientId, status])
  @@index([scheduledAt])
  @@index([entityType, entityId])
  @@map("notifications")
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  taxId        String?
  address      String?
  phone        String?
  email        String?
  isActive     Boolean       @default(true)
  tenantId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bankAccounts BankAccount[]
  costs        Cost[]
  locations    Location[]
  transactions Transaction[]
  workOrders   WorkOrder[]

  @@map("companies")
}

model Vendor {
  id             String     @id @default(cuid())
  internalNumber String     @unique // Auto-generated: SUPP-001, SUPP-002, etc.
  name           String
  taxId          String?    // RUT - optional since not always available
  phone          String?
  email          String?
  address        String?
  contactName    String?
  paymentTerms   String?
  isActive       Boolean    @default(true)
  tenantId       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  // New fields
  vendorType     VendorType @default(SUPPLIER)
  brandContactId String?    // Link to brand contact if this vendor is a brand
  
  // Relationships
  // REMOVED: costs Cost[] - now handled by EntityRelationship system
  mainSupplierOrders PurchaseOrder[] @relation("MainSupplier")
  subSupplierOrders  PurchaseOrderSubSupplier[]
  subSupplierLines   PurchaseOrderLine[] @relation("SubSupplierLines")
  brandContact       BrandContact?   @relation(fields: [brandContactId], references: [id])

  @@map("vendors")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  code        String?           @unique
  description String?
  color       String?
  emoji       String?
  isInventory Boolean           @default(false)
  parentId    String?
  isActive    Boolean           @default(true)
  tenantId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  costs       Cost[]
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  // REMOVED: products Product[] - now handled by EntityRelationship system

  @@map("product_categories")
}

model Cost {
  id                  String                @id @default(cuid())
  companyId           String
  categoryId          String?
  // REMOVED: vendorId String? - now handled by EntityRelationship system
  docType             DocumentKind
  docNumber           String?
  date                DateTime
  total               Decimal               @db.Decimal(12, 2)
  currency            String                @default("CLP")
  payerType           PayerType             @default(COMPANY)
  payerCompanyId      String?
  staffId             String?
  bankAccountId       String?
  description         String?
  status              CostStatus            @default(PENDING)
  reimbursementStatus ReimbursementStatus?
  tenantId            String?
  createdBy           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  attachments         Attachment[]
  lines               CostLine[]
  links               CostTransactionLink[]
  taxDocuments        TaxDocument[]
  bankAccount         BankAccount?          @relation("CostBankAccount", fields: [bankAccountId], references: [id])
  category            ProductCategory?      @relation(fields: [categoryId], references: [id])
  company             Company               @relation(fields: [companyId], references: [id])
  creator             User?                 @relation("CostCreator", fields: [createdBy], references: [id])
  staff               User?                 @relation("CostStaff", fields: [staffId], references: [id])
  // REMOVED: vendor Vendor? - now handled by EntityRelationship system

  @@index([companyId])
  @@index([categoryId])
  @@index([date])
  // REMOVED: @@index([vendorId]) - field no longer exists
  @@map("costs")
}

model CostLine {
  id          String    @id @default(cuid())
  costId      String
  productId   String?
  isInventory Boolean   @default(false)
  quantity    Decimal?  @db.Decimal(12, 3)
  unitCost    Decimal?  @db.Decimal(12, 4)
  totalCost   Decimal   @db.Decimal(12, 2)
  locationId  String?
  description String?
  createdAt   DateTime  @default(now())
  cost        Cost      @relation(fields: [costId], references: [id], onDelete: Cascade)
  location    Location? @relation("CostLineLocation", fields: [locationId], references: [id])
  product     Product?  @relation("ProductCostLines", fields: [productId], references: [id])

  @@index([costId])
  @@index([productId])
  @@map("cost_lines")
}

model Attachment {
  id         String   @id @default(cuid())
  costId     String
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int?
  ocrData    Json?
  uploadedBy String
  uploadedAt DateTime @default(now())
  cost       Cost     @relation(fields: [costId], references: [id], onDelete: Cascade)
  uploader   User     @relation("AttachmentUploader", fields: [uploadedBy], references: [id])

  @@index([costId])
  @@map("attachments")
}

model Location {
  id                 String          @id @default(cuid())
  name               String
  type               LocationType
  address            String?
  companyId          String
  isActive           Boolean         @default(true)
  tenantId           String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  costLines          CostLine[]      @relation("CostLineLocation")
  inventoryMovesFrom InventoryMove[] @relation("MoveFromLocation")
  inventoryMovesTo   InventoryMove[] @relation("MoveToLocation")
  company            Company         @relation(fields: [companyId], references: [id])
  workOrders         WorkOrder[]     @relation("WorkOrderLocation")

  @@map("locations")
}

model InventoryMove {
  id             String            @id @default(cuid())
  type           InventoryMoveType
  productId      String
  fromLocationId String?
  toLocationId   String?
  quantity       Decimal           @db.Decimal(12, 3)
  unitCost       Decimal?          @db.Decimal(12, 4)
  totalCost      Decimal?          @db.Decimal(12, 2)
  reason         String?
  referenceType  String?
  referenceId    String?
  lotCode        String?
  expiryDate     DateTime?
  createdBy      String
  createdAt      DateTime          @default(now())
  creator        User              @relation("InventoryMoveCreator", fields: [createdBy], references: [id])
  fromLocation   Location?         @relation("MoveFromLocation", fields: [fromLocationId], references: [id])
  product        Product           @relation("ProductInventoryMoves", fields: [productId], references: [id])
  toLocation     Location?         @relation("MoveToLocation", fields: [toLocationId], references: [id])

  @@index([productId])
  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([createdAt])
  @@map("inventory_moves")
}

model BOMComponent {
  id          String   @id @default(cuid())
  productId   String
  componentId String
  quantity    Decimal  @db.Decimal(12, 3)
  uom         String
  unitCost    Decimal? @db.Decimal(12, 4)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  component   Product  @relation("ComponentProduct", fields: [componentId], references: [id])
  product     Product  @relation("ProductBOM", fields: [productId], references: [id])

  @@unique([productId, componentId])
  @@map("bom_components")
}

model WorkOrder {
  id           String               @id @default(cuid())
  companyId    String
  // REMOVED: productId String - now handled by EntityRelationship system
  locationId   String
  qtyPlanned   Decimal              @db.Decimal(12, 3)
  qtyProduced  Decimal?             @db.Decimal(12, 3)
  qtyScrap     Decimal?             @db.Decimal(12, 3)
  lotCode      String?
  status       WorkOrderStatus      @default(PLANNED)
  plannedCost  Decimal?             @db.Decimal(12, 2)
  actualCost   Decimal?             @db.Decimal(12, 2)
  yieldPercent Decimal?             @db.Decimal(5, 2)
  startedAt    DateTime?
  finishedAt   DateTime?
  notes        String?
  createdBy    String
  tenantId     String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  components   WorkOrderComponent[]
  company      Company              @relation(fields: [companyId], references: [id])
  creator      User                 @relation("WorkOrderCreator", fields: [createdBy], references: [id])
  location     Location             @relation("WorkOrderLocation", fields: [locationId], references: [id])
  // REMOVED: product Product @relation("ProductWorkOrders") - now handled by EntityRelationship system

  @@index([locationId])
  @@index([status])
  @@map("work_orders")
}

model WorkOrderComponent {
  id          String    @id @default(cuid())
  workOrderId String
  productId   String
  qtyPlanned  Decimal   @db.Decimal(12, 3)
  qtyConsumed Decimal?  @db.Decimal(12, 3)
  unitCost    Decimal?  @db.Decimal(12, 4)
  totalCost   Decimal?  @db.Decimal(12, 2)
  createdAt   DateTime  @default(now())
  product     Product   @relation(fields: [productId], references: [id])
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_components")
}

model CostTransactionLink {
  id            String      @id @default(cuid())
  costId        String
  transactionId String
  amount        Decimal?    @db.Decimal(12, 2)
  createdBy     String
  createdAt     DateTime    @default(now())
  cost          Cost        @relation(fields: [costId], references: [id], onDelete: Cascade)
  creator       User        @relation("CostTransactionLinkCreator", fields: [createdBy], references: [id])
  transaction   Transaction @relation("CostTransactionTransaction", fields: [transactionId], references: [id], onDelete: Cascade)

  @@unique([costId, transactionId])
  @@index([transactionId])
  @@map("cost_transaction_links")
}

model Payroll {
  id              String         @id @default(cuid())
  runDate         DateTime
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  status          PayrollStatus  @default(DRAFT)
  totalGrossPay   Decimal        @db.Decimal(12, 2)
  totalDeductions Decimal        @db.Decimal(12, 2)
  totalNetPay     Decimal        @db.Decimal(12, 2)
  notes           String?
  approvedBy      String?
  approvedAt      DateTime?
  processedBy     String?
  processedAt     DateTime?
  tenantId        String?
  isDeleted       Boolean        @default(false)
  deletedAt       DateTime?
  deletedBy       String?
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  payrollEntries  PayrollEntry[]
  approver        User?          @relation("PayrollApprover", fields: [approvedBy], references: [id])
  processor       User?          @relation("PayrollProcessor", fields: [processedBy], references: [id])
  transactions    Transaction[]

  @@index([runDate])
  @@index([status])
  @@index([payPeriodStart, payPeriodEnd])
  @@map("payrolls")
}

model PayrollEntry {
  id              String    @id @default(cuid())
  payrollId       String
  employeeId      String
  baseSalary      Decimal   @db.Decimal(10, 2)
  hoursWorked     Decimal?  @db.Decimal(5, 2)
  overtimeHours   Decimal?  @db.Decimal(5, 2)
  bonusAmount     Decimal?  @db.Decimal(10, 2)
  allowances      Decimal?  @db.Decimal(10, 2)
  grossPay        Decimal   @db.Decimal(10, 2)
  taxDeductions   Decimal   @db.Decimal(10, 2)
  socialSecurity  Decimal   @db.Decimal(10, 2)
  otherDeductions Decimal?  @db.Decimal(10, 2)
  netPay          Decimal   @db.Decimal(10, 2)
  notes           String?
  tenantId        String?
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  deletedBy       String?
  createdBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  employee        User      @relation("PayrollEmployee", fields: [employeeId], references: [id])
  payroll         Payroll   @relation(fields: [payrollId], references: [id])

  @@unique([payrollId, employeeId])
  @@index([payrollId])
  @@index([employeeId])
  @@map("payroll_entries")
}

model SalaryAdjustment {
  id             String               @id @default(cuid())
  employeeId     String
  adjustmentType SalaryAdjustmentType
  previousAmount Decimal              @db.Decimal(10, 2)
  newAmount      Decimal              @db.Decimal(10, 2)
  effectiveDate  DateTime
  reason         String
  notes          String?
  approvedBy     String?
  approvedAt     DateTime?
  tenantId       String?
  isDeleted      Boolean              @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdBy      String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  approver       User?                @relation("SalaryAdjustmentApprover", fields: [approvedBy], references: [id])
  employee       User                 @relation("SalaryAdjustmentEmployee", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([effectiveDate])
  @@index([adjustmentType])
  @@map("salary_adjustments")
}

model EmployeeExpense {
  id                         String        @id @default(cuid())
  employeeId                 String
  description                String
  amount                     Decimal       @db.Decimal(10, 2)
  category                   String
  expenseDate                DateTime
  receiptUrl                 String?
  status                     ExpenseStatus @default(PENDING)
  submittedAt                DateTime?
  reviewedBy                 String?
  reviewedAt                 DateTime?
  reimbursedAt               DateTime?
  reimbursementTransactionId String?       @unique
  notes                      String?
  tenantId                   String?
  isDeleted                  Boolean       @default(false)
  deletedAt                  DateTime?
  deletedBy                  String?
  createdBy                  String?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  employee                   User          @relation("EmployeeExpenseEmployee", fields: [employeeId], references: [id])
  reimbursementTransaction   Transaction?  @relation(fields: [reimbursementTransactionId], references: [id])
  reviewer                   User?         @relation("ExpenseReviewer", fields: [reviewedBy], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([expenseDate])
  @@index([category])
  @@map("employee_expenses")
}

model PTORequest {
  id          String    @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  totalDays   Decimal   @db.Decimal(5, 2)
  status      PTOStatus @default(DRAFT)
  reason      String?
  submittedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  cancelledAt DateTime?
  tenantId    String?
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  approver    User?     @relation("PTOApprover", fields: [approvedBy], references: [id])
  employee    User      @relation("PTOEmployee", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("pto_requests")
}

model PTOBalance {
  id            String    @id @default(cuid())
  employeeId    String    @unique
  year          Int
  totalDays     Decimal   @db.Decimal(5, 2)
  usedDays      Decimal   @default(0) @db.Decimal(5, 2)
  carryOverDays Decimal   @default(0) @db.Decimal(5, 2)
  tenantId      String?
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  createdBy     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  employee      User      @relation("PTOBalanceEmployee", fields: [employeeId], references: [id])

  @@unique([employeeId, year])
  @@index([year])
  @@map("pto_balances")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectKind {
  DEADLINE
  CORE
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ProductFormat {
  ENVASADOS   // Code 100
  CONGELADOS  // Code 200
  FRESCOS     // Code 300
}


enum ProductExtra {
  VEGANO      // Code 8
  SIN_AZUCAR  // Code 9
  SIN_GLUTEN  // Code 6
  KETO        // Code 7
  ORGANICO    // Code 5
  LIGHT       // Code 4
  INTEGRAL    // Code 3
  ARTESANAL   // Code 2
}

enum BudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  LOCKED
  CANCELLED
}

enum BudgetCategory {
  OPEX
  CAPEX
  REVENUE
  OTHER
}

enum CommentType {
  BUDGET
  BUDGET_LINE
  TASK
  PROJECT
}

enum DocumentType {
  WIKI
  SOP
  PLAYBOOK
  TEMPLATE
}

enum DocumentStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  MERCADO_PAGO
  BANK_TRANSFER
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  OTHER
}

enum AuditOperation {
  CREATE
  UPDATE
  DELETE
  RESTORE
}

enum NotificationType {
  EMAIL
  PUSH
  IN_APP
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum RuleTrigger {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  USER_REGISTERED
  PROJECT_CREATED
  DEADLINE_APPROACHING
  STOCK_LOW
  CUSTOM
}

enum LocationType {
  WAREHOUSE
  STORE
  PRODUCTION
  OFFICE
}

enum ProductType {
  INSUMO
  TERMINADO
  SERVICIO
}

enum InventoryMoveType {
  ENTRADA_COMPRA
  ENTRADA_PRODUCCION
  SALIDA_PRODUCCION
  SALIDA_VENTA
  TRASLADO
  AJUSTE
  MERMA
  DEVOLUCION
}

enum DocumentKind {
  FACTURA
  BOLETA
  RECIBO
  OTRO
}

enum PayerType {
  COMPANY
  STAFF
}

enum CostStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  PAID
}

enum WorkOrderStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PTOStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PROCESSED
  CANCELLED
}

enum SalaryAdjustmentType {
  SALARY_INCREASE
  SALARY_DECREASE
  BONUS
  ALLOWANCE_CHANGE
  PROMOTION
  DEMOTION
  ANNUAL_REVIEW
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
  CANCELLED
}

// Calendar Models
model CalendarEvent {
  id          String           @id @default(cuid())
  type        CalendarEventType
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  attendees   String[]         // Array of user emails
  assignedTo  String?
  priority    CalendarPriority @default(MEDIUM)
  status      EventStatus      @default(SCHEDULED)
  color       String?
  createdBy   String
  tenantId    String?
  isDeleted   Boolean          @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Recurring events
  isRecurring       Boolean   @default(false)
  recurringType     String?   // 'daily', 'weekly', 'monthly'
  recurringInterval Int?      // Every N days/weeks/months
  recurringEndDate  DateTime?
  parentEventId     String?   // For recurring event instances
  
  creator     User           @relation("CalendarEventCreator", fields: [createdBy], references: [id])
  parentEvent CalendarEvent? @relation("RecurringEvents", fields: [parentEventId], references: [id])
  childEvents CalendarEvent[] @relation("RecurringEvents")

  @@index([startTime])
  @@index([endTime])
  @@index([type])
  @@index([createdBy])
  @@index([assignedTo])
  @@map("calendar_events")
}

model StaffShift {
  id        String      @id @default(cuid())
  userId    String
  date      DateTime    // Date of the shift
  startTime String      // HH:MM format
  endTime   String      // HH:MM format
  position  String
  status    ShiftStatus @default(SCHEDULED)
  notes     String?
  tenantId  String?
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
  deletedBy String?
  createdBy String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  user User @relation("StaffShiftUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([status])
  @@map("staff_shifts")
}

model CafeSchedule {
  id           String    @id @default(cuid())
  date         DateTime  @unique // Date for the schedule
  status       CafeStatus
  openTime     String?   // HH:MM format
  closeTime    String?   // HH:MM format
  
  // Special hours (holidays, events, etc.)
  specialReason String?
  specialOpen   String?   // Special opening time HH:MM
  specialClose  String?   // Special closing time HH:MM
  
  notes     String?
  tenantId  String?
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([date])
  @@map("cafe_schedules")
}

// Calendar Enums
enum CalendarEventType {
  TASK
  MEETING
  HOLIDAY
  SHIFT
  CAFE_STATUS
}

enum CalendarPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EventStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  POSTPONED
}

enum ShiftStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CafeStatus {
  OPEN
  CLOSED
  LIMITED
}

enum VendorType {
  SUPPLIER      // Regular supplier
  BRAND_CONTACT // Brand that can also act as supplier
  AGENT         // Agent for brands
}

enum POStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  PARTIALLY_DELIVERED
  DELIVERED
  CANCELLED
}

// Brand Models
model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  tenantId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  // REMOVED: products relation - now handled by EntityRelationship system only
  contacts     BrandContact[]
  
  @@map("brands")
}

model BrandContact {
  id            String   @id @default(cuid())
  brandId       String
  name          String
  role          String?
  email         String?
  phone         String?
  skuAbbreviation String? // SKU abbreviation for this contact
  isPrimary     Boolean  @default(false)
  isActive      Boolean  @default(true)
  tenantId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  brand   Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  vendors Vendor[] // Brand contacts can become suppliers
  
  @@map("brand_contacts")
}

// Enhanced Purchase Order Models
model PurchaseOrder {
  id                String   @id @default(cuid())
  poNumber          String   @unique // Auto-generated: PO-2024-001
  mainSupplierId    String   // Who creates the factura
  date              DateTime
  expectedDelivery  DateTime?
  status            POStatus @default(DRAFT)
  notes             String?
  
  // Financial tracking
  subtotal          Decimal  @db.Decimal(12, 2)
  shippingCost      Decimal? @db.Decimal(12, 2)
  taxAmount         Decimal  @db.Decimal(12, 2)
  totalAmount       Decimal  @db.Decimal(12, 2)
  currency          String   @default("CLP")
  
  tenantId          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  mainSupplier      Vendor                     @relation("MainSupplier", fields: [mainSupplierId], references: [id])
  lines             PurchaseOrderLine[]
  subSuppliers      PurchaseOrderSubSupplier[]
  
  @@map("purchase_orders")
}

model PurchaseOrderLine {
  id              String   @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Decimal  @db.Decimal(12, 3)
  unitCost        Decimal  @db.Decimal(12, 4)
  totalCost       Decimal  @db.Decimal(12, 2)
  shippingCostUnit Decimal? @db.Decimal(12, 4) // Prorated shipping per unit
  
  // Delivery tracking
  subSupplierId   String?  // If delivered by sub-supplier
  deliveryDate    DateTime?
  trackingNumber  String?
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])
  subSupplier     Vendor?       @relation("SubSupplierLines", fields: [subSupplierId], references: [id])
  
  @@map("purchase_order_lines")
}

model PurchaseOrderSubSupplier {
  id              String   @id @default(cuid())
  purchaseOrderId String
  subSupplierId   String
  shippingCost    Decimal? @db.Decimal(12, 2)
  deliveryDate    DateTime?
  trackingNumber  String?
  notes           String?
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  subSupplier     Vendor        @relation(fields: [subSupplierId], references: [id])
  
  @@unique([purchaseOrderId, subSupplierId])
  @@map("purchase_order_sub_suppliers")
}

// General Contacts Model
model Contact {
  id                  String      @id @default(cuid())
  name                String
  type                ContactType
  entityType          EntityType
  
  // Contact Information
  phone               String?
  email               String?
  instagram           String?
  rut                 String?
  company             String?
  address             String?
  notes               String?
  
  // Business-specific fields
  contactPersonName   String?     // For businesses: name of the contact person
  giro                String?     // Business activity/industry
  skuAbbreviation     String?     // For suppliers/brands
  
  // Bank account details (stored as JSON)
  bankDetails         Json?
  
  // Metadata
  tags                String[]    @default([])
  portalToken         String?     // Random token for supplier portal access
  portalEnabled       Boolean     @default(false)
  
  // Analytics data
  totalPurchases      Decimal?    @db.Decimal(12, 2)
  totalSales          Decimal?    @db.Decimal(12, 2)
  averagePurchase     Decimal?    @db.Decimal(12, 2)
  averageSale         Decimal?    @db.Decimal(12, 2)
  lastPurchaseAmount  Decimal?    @db.Decimal(12, 2)
  lastSaleAmount      Decimal?    @db.Decimal(12, 2)
  purchaseCount       Int         @default(0)
  salesCount          Int         @default(0)
  relationshipScore   Int         @default(1) // 1-5 rating
  
  // Standard fields
  tenantId            String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  createdBy           String?
  deletedAt           DateTime?
  deletedBy           String?
  isDeleted           Boolean     @default(false)
  lastContact         DateTime?
  
  @@map("contacts")
}

enum ContactType {
  supplier
  customer
  important
  brand
}

enum EntityType {
  business
  person
}

// Universal Entity Relationship System
model EntityRelationship {
  id               String   @id @default(cuid())
  relationshipType String   // "supplier", "assigned_to", "mentioned_in", "works_with", etc.
  sourceType       String   // "Product", "Contact", "User", "WorkOrder", "Task", "Project", "Budget"
  sourceId         String
  targetType       String   // "Contact", "Product", "User", "Project", "Task", "Budget"
  targetId         String
  metadata         Json?    // Rich relationship context
  strength         Int      @default(1) // 1-5 relationship strength score
  isActive         Boolean  @default(true)
  validFrom        DateTime? // Relationship validity period
  validUntil       DateTime? // Relationship expiry
  priority         Int      @default(1) // 1-10 priority for relationship importance
  tags             String[] @default([]) // Flexible tagging system
  createdBy        String?
  tenantId         String?
  isDeleted        Boolean  @default(false)
  deletedAt        DateTime?
  deletedBy        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // History tracking for relationship changes
  relationshipHistory Json? // Track relationship evolution
  lastInteractionAt   DateTime? // When this relationship was last active
  interactionCount    Int      @default(0) // Number of times entities interacted
  
  @@index([sourceType, sourceId])
  @@index([targetType, targetId])
  @@index([relationshipType])
  @@index([strength])
  @@index([isActive])
  @@index([createdAt])
  @@unique([sourceType, sourceId, targetType, targetId, relationshipType]) // Prevent duplicates
  @@map("entity_relationships")
}

// Relationship Type Registry for standardization
model RelationshipType {
  id               String   @id @default(cuid())
  name             String   @unique // "supplier", "assigned_to", "mentioned_in"
  displayName      String   // "Supplier", "Assigned To", "Mentioned In"
  description      String?
  sourceTypes      String[] // Which entity types can be source
  targetTypes      String[] // Which entity types can be target
  isBidirectional  Boolean  @default(false) // If true, creates reverse relationship
  reverseTypeName  String? // Name for reverse relationship
  defaultStrength  Int      @default(1) // Default strength value
  isSystem         Boolean  @default(false) // System-managed vs user-created
  isActive         Boolean  @default(true)
  color            String?  // For UI visualization
  icon             String?  // Icon identifier
  tenantId         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("relationship_types")
}

// Universal SKU System
model EntitySKU {
  id            String   @id @default(cuid())
  entityType    String   // "Product", "WorkOrder", "Contact", "Task", "Project"
  entityId      String
  skuValue      String   @unique // The actual SKU: "100-SMT-CAF-56"
  templateId    String?  // Reference to SKU template used
  components    Json     // Component breakdown: {"category": "CAF", "supplier": "SMT"}
  isActive      Boolean  @default(true)
  version       Int      @default(1) // SKU version for updates
  generatedAt   DateTime @default(now())
  expiresAt     DateTime? // For temporary SKUs
  metadata      Json?    // Additional SKU metadata
  tenantId      String?
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Link to template if used
  template      SKUTemplate? @relation(fields: [templateId], references: [id])
  
  @@index([entityType, entityId])
  @@index([skuValue])
  @@index([templateId])
  @@unique([entityType, entityId]) // One SKU per entity
  @@map("entity_skus")
}

// SKU Template System for customizable generation
model SKUTemplate {
  id               String   @id @default(cuid())
  name             String   @unique // "Product SKU", "Work Order SKU"
  description      String?
  entityType       String   // "Product", "WorkOrder", "Contact"
  template         String   // "{category}-{supplier}-{format}-{sequence}"
  components       Json     // Component definitions and rules
  isActive         Boolean  @default(true)
  isDefault        Boolean  @default(false) // Default template for entity type
  validationRules  Json?    // Rules for SKU validation
  exampleOutput    String?  // Example of generated SKU
  tenantId         String?
  createdBy        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Track usage
  usageCount       Int      @default(0)
  lastUsedAt       DateTime?
  
  // Relations
  generatedSKUs    EntitySKU[] // SKUs generated from this template
  
  @@map("sku_templates")
}

// ===============================================
// POS SALES SYSTEM - Tuu Integration
// ===============================================

// Main POS Transaction record from Tuu BranchReport
model POSTransaction {
  id                  String            @id @default(cuid())
  
  // Tuu API fields
  tuuSaleId           String            @unique // saleId from Tuu
  sequenceNumber      String?           // Receipt/sequence number
  serialNumber        String?           // POS terminal serial
  locationId          String?           // Tuu location ID
  address             String?           // Physical location address
  
  // Transaction details
  status              POSTransactionStatus
  transactionDateTime DateTime          // When the transaction occurred
  transactionType     String            // DEBIT, CREDIT, CASH
  documentType        Int?              // Document type code
  
  // Payment details
  cardBrand           String?           // VISA, MASTERCARD, etc.
  cardBin             String?           // Card BIN number
  cardOrigin          String?           // Nacional, Internacional
  cardIssuer          String?           // Bank/issuer name
  
  // Amounts (stored in centavos for precision)
  saleAmount          Decimal           @db.Decimal(12, 2)
  tipAmount           Decimal           @default(0) @db.Decimal(12, 2)
  cashbackAmount      Decimal           @default(0) @db.Decimal(12, 2)
  totalAmount         Decimal           @db.Decimal(12, 2)
  currencyCode        String            @default("CLP")
  
  // Installment info
  installmentType     String?           // BANCO, etc.
  installmentCount    Int               @default(1)
  
  // Processing info
  acquirerId          String?           // Acquirer ID
  instance            Int?              // Processing instance
  
  // Sync metadata
  syncedAt            DateTime          @default(now())
  syncSource          String            @default("TUU_BRANCH_REPORT")
  lastUpdatedAt       DateTime          @updatedAt
  
  // Standard fields
  tenantId            String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relations
  items               POSTransactionItem[]
  syncLogs            POSSyncLog[]      @relation("TransactionSyncLogs")
  taxDocuments        TaxDocument[]
  
  @@index([tuuSaleId])
  @@index([transactionDateTime])
  @@index([status])
  @@index([serialNumber])
  @@index([locationId])
  @@index([syncedAt])
  @@map("pos_transactions")
}

// Individual items within a POS transaction
model POSTransactionItem {
  id              String         @id @default(cuid())
  transactionId   String
  
  // Item details from Tuu
  code            String?        // Product code
  name            String         // Product name
  quantity        Decimal        @db.Decimal(12, 3)
  price           Decimal        @db.Decimal(12, 2)
  
  // Links to internal system
  linkedProductId String?        // Link to internal Product if matched
  
  // Standard fields
  createdAt       DateTime       @default(now())
  
  // Relations
  transaction     POSTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  linkedProduct   Product?       @relation("POSItemProduct", fields: [linkedProductId], references: [id])
  
  @@index([transactionId])
  @@index([linkedProductId])
  @@map("pos_transaction_items")
}

// POS sync operations log
model POSSyncLog {
  id              String            @id @default(cuid())
  
  // Sync operation details
  syncType        POSSyncType       // FULL_SYNC, INCREMENTAL, MANUAL
  status          POSSyncStatus
  startDate       DateTime          // Date range synced from
  endDate         DateTime          // Date range synced to
  
  // Results
  totalRequested  Int               @default(0)
  totalProcessed  Int               @default(0)
  totalCreated    Int               @default(0)
  totalUpdated    Int               @default(0)
  totalSkipped    Int               @default(0)
  totalErrors     Int               @default(0)
  
  // Timing
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  duration        Int?              // Duration in milliseconds
  
  // Error handling
  errorMessage    String?
  errorDetails    Json?
  
  // API details
  apiEndpoint     String            @default("/BranchReport/branch-report")
  requestPayload  Json?
  responseData    Json?
  
  // Standard fields
  tenantId        String?
  createdBy       String?
  createdAt       DateTime          @default(now())
  
  // Relations
  transactions    POSTransaction[]  @relation("TransactionSyncLogs")
  
  @@index([status])
  @@index([startedAt])
  @@index([syncType])
  @@map("pos_sync_logs")
}

// POS configuration and settings
model POSConfiguration {
  id                      String   @id @default(cuid())
  
  // Tuu API settings
  apiKey                  String?  // Encrypted API key
  baseUrl                 String   @default("https://integrations.payment.haulmer.com")
  useRealAPI              Boolean  @default(false)
  
  // Sync settings
  autoSyncEnabled         Boolean  @default(true)
  syncIntervalHours       Int      @default(24) // Sync every 24 hours
  maxDaysToSync          Int      @default(60)  // Maximum 60 days per sync
  
  // Data retention
  retentionDays          Int      @default(365) // Keep data for 1 year
  
  // Business settings
  defaultLocationId      String?  // Default location if not specified
  merchantName           String?  // Business name from Tuu
  partnerId              String?  // Tuu partner ID
  
  // Last sync tracking
  lastSuccessfulSync     DateTime?
  lastSyncAttempt        DateTime?
  consecutiveFailures    Int      @default(0)
  
  // Standard fields
  tenantId               String?  @unique
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  @@map("pos_configurations")
}

// Enums for POS system
enum POSTransactionStatus {
  COMPLETED
  PENDING
  FAILED
  CANCELLED
  REFUNDED
}

enum POSSyncType {
  FULL_SYNC
  INCREMENTAL
  MANUAL
  SCHEDULED
}

enum POSSyncStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Invoicing (OpenFactura) models
model TaxDocument {
  id              String           @id @default(cuid())
  type            TaxDocumentType
  folio           String?
  documentCode    Int?             // e.g., 39 Boleta, 33 Factura
  openFacturaId   String?          @unique
  emitterRUT      String?
  emitterName     String?
  receiverRUT     String?
  receiverName    String?
  netAmount       Decimal?         @db.Decimal(12, 2)
  taxAmount       Decimal?         @db.Decimal(12, 2)
  totalAmount     Decimal?         @db.Decimal(12, 2)
  currency        String?          @default("CLP")
  issuedAt        DateTime?
  status          TaxDocumentStatus @default(DRAFT)
  pdfUrl          String?
  xmlUrl          String?
  rawResponse     Json?
  notes           String?
  // Links
  posTransactionId String?
  costId           String?
  posTransaction   POSTransaction?  @relation(fields: [posTransactionId], references: [id])
  cost             Cost?             @relation(fields: [costId], references: [id])
  // Standard
  tenantId        String?
  createdBy       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relations
  items           TaxDocumentItem[]

  @@index([type])
  @@index([status])
  @@index([issuedAt])
  @@index([posTransactionId])
  @@index([costId])
  @@map("tax_documents")
}

model TaxDocumentItem {
  id             String        @id @default(cuid())
  taxDocumentId  String
  description    String
  quantity       Decimal       @db.Decimal(12, 3)
  unitPrice      Decimal       @db.Decimal(12, 2)
  net            Decimal       @db.Decimal(12, 2)
  tax            Decimal       @db.Decimal(12, 2)
  total          Decimal       @db.Decimal(12, 2)
  taxExempt      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  taxDocument    TaxDocument   @relation(fields: [taxDocumentId], references: [id], onDelete: Cascade)

  @@index([taxDocumentId])
  @@map("tax_document_items")
}

enum TaxDocumentType {
  BOLETA
  FACTURA
  CREDIT_NOTE
}

enum TaxDocumentStatus {
  DRAFT
  ISSUED
  ACCEPTED
  REJECTED
  CANCELLED
  ERROR
}
